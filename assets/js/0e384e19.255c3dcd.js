"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{426:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return c}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={sidebar_position:1,title:"flex quickstart"},s="Discover Flex",u={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"flex quickstart",description:"Getting Started",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",editUrl:"https://github.com/go-flexible/go-flexible.github.io/edit/main/docs/intro.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"flex quickstart"},sidebar:"tutorialSidebar",next:{title:"flexhttp",permalink:"/docs/plugins/flexhttp"}},d=[{value:"Getting Started",id:"getting-started",children:[{value:"Requirements",id:"requirements",children:[]}]},{value:"Let&#39;s make an API",id:"lets-make-an-api",children:[{value:"Bring in flex",id:"bring-in-flex",children:[]},{value:"Write the program",id:"write-the-program",children:[]},{value:"Review",id:"review",children:[]}]}],p={toc:d};function c(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"discover-flex"},"Discover Flex"),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"Get started by ",(0,a.kt)("strong",{parentName:"p"},"creating a new go project"),"."),(0,a.kt)("h3",{id:"requirements"},"Requirements"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Go 1.16 or later"))),(0,a.kt)("h2",{id:"lets-make-an-api"},"Let's make an API"),(0,a.kt)("p",null,"Let's start by creating a new directory, and initialise a go project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir flex-tutorial\ncd flex-tutorial\ngo mod init flex-tutorial\ntouch main.go\n")),(0,a.kt)("h3",{id:"bring-in-flex"},"Bring in flex"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"go get github.com/go-flexible/flex\n")),(0,a.kt)("h3",{id:"write-the-program"},"Write the program"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"main.go")," file, and add in the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n        "context"\n        "fmt"\n        "log"\n        "net/http"\n\n        "github.com/go-flexible/flex"\n)\n\nfunc main() {\n        // Create a new mux and attach a handler. \n        mux := http.NewServeMux()\n        mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {\n                fmt.Fprintln(w, "Hello, World!")\n        })\n\n        // Create a simple (and not production ready) http server.\n        server := &http.Server{\n                Addr:    ":8080",\n                Handler: mux,\n        }\n\n        // Start the application.\n        flex.MustStart(\n                context.Background(),\n                &httpServer{Server: server},\n        )\n}\n\n// Create an httpServer wrapper struct.\n// This allows us to implement the Worker primitive.\ntype httpServer struct{ *http.Server }\n\n// Run should run start processing the worker and be a blocking operation.\nfunc (h *httpServer) Run(_ context.Context) error {\n        log.Printf("serving on: %s", h.Addr)\n        return h.ListenAndServe()\n}\n\n// Halt should tell the worker to stop doing work.\nfunc (h *httpServer) Halt(ctx context.Context) error {\n        log.Println("shutting down http server")\n        return h.Shutdown(ctx)\n}\n')),(0,a.kt)("h3",{id:"review"},"Review"),(0,a.kt)("p",null,"Obviously, this is a contrived example. If this is all you were really building, you wouldn't need flex!"),(0,a.kt)("p",null,"However, here's what we've acheived:"),(0,a.kt)("p",null,"We've implemented an http server that flex can run as a ",(0,a.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/go-flexible/flex#Worker"},"Worker"),". This means that the server is running in it's own goroutine, and that graceful shutdown will occur when the context we've passed as the first argument to ",(0,a.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/go-flexible/flex#MustStart"},"MustStart")," is cancelled.\nThis can be done by interrupting the program with ",(0,a.kt)("inlineCode",{parentName:"p"},"CTRL+c"),", or by signalling the application (for example, the way kubernetes would)."))}c.isMDXComponent=!0}}]);